{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","nftCount","setNftCount","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","alert","chainId","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","getNftCount","error","askContractToMintNft","connectedContract","getTotalNFTsMintedSoFar","currNftCountTxn","currNftCount","makeAnEpicNFT","nftTxn","wait","hash","useEffect","className","onClick","open","disabled","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6fad641.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\n\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n\nconst TWITTER_HANDLE = \"TheOpCoder\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK =\n    \"https://testnets.opensea.io/collection/epicnft-tri3nryjsg\";\nconst TOTAL_MINT_COUNT = 30;\n\nconst CONTRACT_ADDRESS = \"0x23916bC5250af3b4F6FD35F7FC39D0cb897BAEC4\";\n\nconst App = () => {\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n\n    const [nftCount, setNftCount] = useState(0);\n\n    const checkIfWalletIsConnected = async () => {\n        const { ethereum } = window;\n\n        if (!ethereum) {\n            console.log(\"Make sure you have metamask!\");\n            return;\n        } else {\n            console.log(\"We have the ethereum object\", ethereum);\n        }\n\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n        if (accounts.length !== 0) {\n            const account = accounts[0];\n            console.log(\"Found an authorized account:\", account);\n            setCurrentAccount(account);\n\n            // Setup listener! This is for the case where a user comes to our site\n            // and ALREADY had their wallet connected + authorized.\n            setupEventListener();\n        } else {\n            console.log(\"No authorized account found\");\n        }\n    };\n\n    /*\n     * Implement your connectWallet method here\n     */\n    const connectWallet = async () => {\n        try {\n            const { ethereum } = window;\n\n            if (!ethereum) {\n                alert(\"Get MetaMask!\");\n                return;\n            }\n\n            let chainId = await ethereum.request({ method: \"eth_chainId\" });\n            console.log(\"Connected to chain \" + chainId);\n\n            // String, hex code of the chainId of the Rinkebey test network\n            const rinkebyChainId = \"0x4\";\n            if (chainId !== rinkebyChainId) {\n                alert(\"You are not connected to the Rinkeby Test Network!\");\n                return;\n            }\n\n            const accounts = await ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n\n            console.log(\"Connected\", accounts[0]);\n            setCurrentAccount(accounts[0]);\n\n            // Setup listener! This is for the case where a user comes to our site\n            // and connected their wallet for the first time.\n            setupEventListener();\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    // Setup our listener.\n    const setupEventListener = async () => {\n        // Most of this looks the same as our function askContractToMintNft\n        try {\n            const { ethereum } = window;\n\n            if (ethereum) {\n                // Same stuff again\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const connectedContract = new ethers.Contract(\n                    CONTRACT_ADDRESS,\n                    myEpicNft.abi,\n                    signer\n                );\n\n                // THIS IS THE MAGIC SAUCE.\n                // This will essentially \"capture\" our event when our contract throws it.\n                // If you're familiar with webhooks, it's very similar to that!\n                connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n                    console.log(from, tokenId.toNumber());\n                    alert(\n                        `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n                    );\n                    getNftCount();\n                });\n\n                console.log(\"Setup event listener!\");\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const askContractToMintNft = async () => {\n        try {\n            const { ethereum } = window;\n\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const connectedContract = new ethers.Contract(\n                    CONTRACT_ADDRESS,\n                    myEpicNft.abi,\n                    signer\n                );\n\n                const currNftCountTxn =\n                    await connectedContract.getTotalNFTsMintedSoFar();\n                const currNftCount = currNftCountTxn.toNumber();\n                setNftCount(currNftCount);\n\n                if (currNftCount >= TOTAL_MINT_COUNT) {\n                    console.log(\"Cannot mint more NFTS!\");\n                    return;\n                }\n\n                console.log(\"Going to pop wallet now to pay gas...\");\n                let nftTxn = await connectedContract.makeAnEpicNFT();\n\n                console.log(\"Mining...please wait.\");\n                await nftTxn.wait();\n                console.log(nftTxn);\n\n                console.log(\n                    `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n                );\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const getNftCount = async () => {\n        try {\n            const { ethereum } = window;\n\n            if (ethereum) {\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const connectedContract = new ethers.Contract(\n                    CONTRACT_ADDRESS,\n                    myEpicNft.abi,\n                    signer\n                );\n\n                const currNftCountTxn =\n                    await connectedContract.getTotalNFTsMintedSoFar();\n                const currNftCount = currNftCountTxn.toNumber();\n                setNftCount(currNftCount);\n                console.log(currNftCount);\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    useEffect(() => {\n        checkIfWalletIsConnected();\n    }, []);\n\n    useEffect(() => {\n        getNftCount();\n    }, []);\n\n    // Render Methods\n    const renderNotConnectedContainer = () => (\n        <button\n            onClick={connectWallet}\n            className=\"cta-button connect-wallet-button\"\n        >\n            Connect Wallet\n        </button>\n    );\n\n    const renderMintUI = () => (\n        <button\n            onClick={askContractToMintNft}\n            className=\"cta-button connect-wallet-button\"\n            disabled={nftCount >= TOTAL_MINT_COUNT}\n        >\n            {nftCount >= TOTAL_MINT_COUNT ? \"Max NFTs Minted:(\" : \"Mint an NFT\"}\n        </button>\n    );\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <div className=\"header-container\">\n                    <p className=\"header gradient-text\">My NFT Collection</p>\n                    <p className=\"sub-text\">\n                        Each unique. Each beautiful. Discover your NFT today.\n                    </p>\n                    <p className=\"sub-text\">\n                        Total NFTs Minted: {nftCount}/{TOTAL_MINT_COUNT}\n                    </p>\n                    <button\n                        className=\"opensea-button cta-button\"\n                        onClick={() => window.open(OPENSEA_LINK)}\n                    >\n                        🌊 View Collection on OpenSea\n                    </button>\n                    <br />\n                    {currentAccount === \"\"\n                        ? renderNotConnectedContainer()\n                        : renderMintUI()}\n                </div>\n                <div className=\"footer-container\">\n                    <img\n                        alt=\"Twitter Logo\"\n                        className=\"twitter-logo\"\n                        src={twitterLogo}\n                    />\n                    <a\n                        className=\"footer-text\"\n                        href={TWITTER_LINK}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                    >{`built on @${TWITTER_HANDLE}`}</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}